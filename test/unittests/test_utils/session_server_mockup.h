#ifndef ELKCPP_SESSION_SERVER_MOCKUP_H
#define ELKCPP_SESSION_SERVER_MOCKUP_H

#include <thread>

#include <grpcpp/grpcpp.h>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

#include "sushi_rpc.grpc.pb.h"

#pragma GCC diagnostic pop

namespace expected_results {
constexpr std::array<unsigned char, 331> STATE =
       {{0x0A, 0x78, 0x0A, 0x06, 0x30, 0x2E, 0x31, 0x32, 0x2E, 0x30, 0x12, 0x04, 0x76, 0x73, 0x74, 0x32, 0x12, 0x04,
         0x76, 0x73, 0x74, 0x33, 0x12, 0x03, 0x6C, 0x76, 0x32, 0x12, 0x04, 0x6A, 0x61, 0x63, 0x6B, 0x12, 0x0B, 0x72,
         0x70, 0x63, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x72, 0x6F, 0x6C, 0x12, 0x0C, 0x61, 0x62, 0x6C, 0x65, 0x74, 0x6F,
         0x6E, 0x20, 0x6C, 0x69, 0x6E, 0x6B, 0x18, 0x40, 0x22, 0x28, 0x33, 0x62, 0x66, 0x30, 0x66, 0x37, 0x62, 0x30,
         0x38, 0x35, 0x66, 0x37, 0x35, 0x33, 0x66, 0x32, 0x64, 0x33, 0x30, 0x38, 0x66, 0x39, 0x32, 0x35, 0x33, 0x66,
         0x63, 0x61, 0x30, 0x63, 0x39, 0x30, 0x37, 0x38, 0x31, 0x62, 0x35, 0x37, 0x63, 0x35, 0x2A, 0x10, 0x32, 0x30,
         0x32, 0x32, 0x2D, 0x30, 0x35, 0x2D, 0x30, 0x34, 0x20, 0x31, 0x34, 0x3A, 0x33, 0x32, 0x12, 0x10, 0x32, 0x30,
         0x32, 0x32, 0x2D, 0x30, 0x35, 0x2D, 0x30, 0x36, 0x20, 0x31, 0x36, 0x3A, 0x34, 0x32, 0x1A, 0x00, 0x22, 0x04,
         0x08, 0x01, 0x10, 0x01, 0x2A, 0x44, 0x0D, 0x00, 0x80, 0x3B, 0x47, 0x15, 0x00, 0x00, 0xF0, 0x42, 0x1A, 0x02,
         0x08, 0x01, 0x22, 0x02, 0x08, 0x01, 0x2A, 0x04, 0x08, 0x04, 0x10, 0x04, 0x48, 0x01, 0x50, 0x01, 0x5A, 0x06,
         0x0A, 0x04, 0x6D, 0x61, 0x69, 0x6E, 0x5A, 0x0A, 0x0A, 0x04, 0x6D, 0x61, 0x69, 0x6E, 0x10, 0x01, 0x18, 0x01,
         0x62, 0x06, 0x0A, 0x04, 0x6D, 0x61, 0x69, 0x6E, 0x62, 0x0A, 0x0A, 0x04, 0x6D, 0x61, 0x69, 0x6E, 0x10, 0x01,
         0x18, 0x01, 0x32, 0x6F, 0x0A, 0x04, 0x6D, 0x61, 0x69, 0x6E, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x30, 0x01,
         0x3A, 0x1E, 0x12, 0x02, 0x08, 0x01, 0x22, 0x07, 0x0A, 0x00, 0x15, 0x00, 0x40, 0x55, 0x3F, 0x22, 0x09, 0x0A,
         0x02, 0x10, 0x01, 0x15, 0x00, 0x00, 0x00, 0x3F, 0x22, 0x04, 0x0A, 0x02, 0x10, 0x02, 0x42, 0x3F, 0x0A, 0x0B,
         0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6F, 0x75, 0x67, 0x68, 0x12, 0x0B, 0x50, 0x61, 0x73, 0x73, 0x74,
         0x68, 0x72, 0x6F, 0x75, 0x67, 0x68, 0x1A, 0x19, 0x73, 0x75, 0x73, 0x68, 0x69, 0x2E, 0x74, 0x65, 0x73, 0x74,
         0x69, 0x6E, 0x67, 0x2E, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6F, 0x75, 0x67, 0x68, 0x2A, 0x02, 0x08,
         0x01, 0x32, 0x04, 0x12, 0x02, 0x08, 0x01}};

} // namespace expected_results

namespace sushi_controller {

class SessionServiceMockup : public sushi_rpc::SessionController::Service
{

    grpc::Status SaveSession(grpc::ServerContext* /* context */,
                             const sushi_rpc::GenericVoidValue* /* request */,
                             sushi_rpc::SessionState* response)
    {
        response->ParseFromString(std::string(expected_results::STATE.begin(), expected_results::STATE.end()));
        return grpc::Status::OK;
    }

    grpc::Status RestoreSession(grpc::ServerContext* /* context */,
                                const sushi_rpc::SessionState* request,
                                sushi_rpc::GenericVoidValue* /* response */)
    {
        auto as_string = request->SerializeAsString();
        if (as_string == std::string(expected_results::STATE.begin(), expected_results::STATE.end()))
        {
            return grpc::Status::OK;
        }
        else
        {
            return grpc::Status(grpc::StatusCode::INVALID_ARGUMENT, "");
        }
    }
};

static std::thread server_thread;
static std::unique_ptr<grpc::Server> server;

static void RunServerMockup();

static void KillServerMockup();

class SessionServerMockup
{
public:
    SessionServerMockup()
    {
        server_thread = std::thread(RunServerMockup);
        usleep(5000); //Wait for server to start
    }

    ~SessionServerMockup()
    {
        KillServerMockup();
        server_thread.join();
    }

private:
    std::thread server_thread;
};

void RunServerMockup()
{
    std::string server_address("localhost:51051");
    SessionServiceMockup service;

    grpc::ServerBuilder builder;

    builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());
    builder.RegisterService(&service);

    server = builder.BuildAndStart();
    // std::cout << "Mockup server listening on " << server_address << std::endl;

    server->Wait();
}

void KillServerMockup()
{
    server->Shutdown();
}

} // namespace sushi_controller

#endif //ELKCPP_SESSION_SERVER_MOCKUP_H
